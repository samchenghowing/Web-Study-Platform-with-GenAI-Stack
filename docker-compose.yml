services:

  llm: &llm
    image: ollama/ollama:latest
    profiles: [ "linux" ]
    networks:
      - net

  llm-gpu:
    <<: *llm
    profiles: [ "linux-gpu" ]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]

  llm-amd:
    image: ollama/ollama:rocm
    profiles: [ "linux-amd" ]
    networks:
      - net
    devices:
      - /dev/kfd
      - /dev/dri
    privileged: true

  pull-model:
    build:
      context: backend
      dockerfile: pull_model.Dockerfile
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL-http://host.docker.internal:11434}
      - LLM=${LLM-llama2}
    networks:
      - net
    tty: true

  neo4j-database:
    user: neo4j:neo4j
    image: neo4j:5.22
    ports:
      - 7687:7687
      - 7474:7474
    volumes:
      - $PWD/data:/data/neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME-neo4j}/${NEO4J_PASSWORD-password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_db_tx__log_rotation_retention__policy=false
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"
        ]
      interval: 15s
      timeout: 30s
      retries: 10
    networks:
      - net

  mongo:
    restart: always
    image: mongo:4.2.0
    volumes:
      - $PWD/data:/data/mongodb
    # TODO: add authentication 
    # environment:
    #   - MONGODB_INITDB_ROOT_USERNAME=${MONGODB_USERNAME-mongodb}
    #   - MONGODB_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD-password}
    networks:
      - net
    expose:
      - 27017

  api:
    build:
      context: backend
      dockerfile: api.Dockerfile
    volumes:
      - $PWD/embedding_model:/embedding_model
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
    environment:
      - NEO4J_URI=${NEO4J_URI-neo4j://database:7687}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD-password}
      - NEO4J_USERNAME=${NEO4J_USERNAME-neo4j}
      - MONGODB_URI=${MONGODB_URI-mongodb://mongo:27017}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL-http://host.docker.internal:11434}
      - LLM=${LLM-llama2}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL-sentence_transformer}
      - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT-"https://api.smith.langchain.com"}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2-false}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    networks:
      - net
      - frontend-net
    depends_on:
      neo4j-database:
        condition: service_healthy
      pull-model:
        condition: service_completed_successfully
    develop:
      watch:
        - action: rebuild
          path: ./backend
          ignore:
            - frontend/
    ports:
      - 8504:8504
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --no-verbose http://localhost:8504/ || exit 1"
        ]
      interval: 5s
      timeout: 3s
      retries: 5

  # node:
  #   build:
  #     context: backend/sandbox
  #     dockerfile: node.Dockerfile
  #   networks:
  #     - net
  #   volumes:
  #     - $PWD/data:/data/sandbox:/app
  #   # Optionally, you can add a command to execute the test script directly.
  #   # command: node test.js

  frontend:
    build:
      context: frontend
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - backend/
            - ./frontend/node_modules/
        - action: rebuild
          path: ./frontend/package.json
          ignore:
            - backend/
    # depends_on:
    #   api:
    #     condition: service_healthy
    networks:
      - frontend-net
    ports:
      - 8505:8505

networks:
  frontend-net:
  net:
